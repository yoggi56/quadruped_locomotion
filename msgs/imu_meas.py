"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import msgs.euler_orient

class imu_meas(object):
    __slots__ = ["euler"]

    __typenames__ = ["msgs.euler_orient"]

    __dimensions__ = [None]

    def __init__(self):
        self.euler = msgs.euler_orient()

    def encode(self):
        buf = BytesIO()
        buf.write(imu_meas._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.euler._get_packed_fingerprint() == msgs.euler_orient._get_packed_fingerprint()
        self.euler._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_meas._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_meas._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = imu_meas()
        self.euler = msgs.euler_orient._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if imu_meas in parents: return 0
        newparents = parents + [imu_meas]
        tmphash = (0x780565756c89daac+ msgs.euler_orient._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if imu_meas._packed_fingerprint is None:
            imu_meas._packed_fingerprint = struct.pack(">Q", imu_meas._get_hash_recursive([]))
        return imu_meas._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

