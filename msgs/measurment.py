"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import msgs.act_meas

import msgs.imu_meas

class measurment(object):
    __slots__ = ["act", "imu"]

    __typenames__ = ["msgs.act_meas", "msgs.imu_meas"]

    __dimensions__ = [[12], None]

    def __init__(self):
        self.act = [ msgs.act_meas() for dim0 in range(12) ]
        self.imu = msgs.imu_meas()

    def encode(self):
        buf = BytesIO()
        buf.write(measurment._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(12):
            assert self.act[i0]._get_packed_fingerprint() == msgs.act_meas._get_packed_fingerprint()
            self.act[i0]._encode_one(buf)
        assert self.imu._get_packed_fingerprint() == msgs.imu_meas._get_packed_fingerprint()
        self.imu._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != measurment._get_packed_fingerprint():
            raise ValueError("Decode error")
        return measurment._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = measurment()
        self.act = []
        for i0 in range(12):
            self.act.append(msgs.act_meas._decode_one(buf))
        self.imu = msgs.imu_meas._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if measurment in parents: return 0
        newparents = parents + [measurment]
        tmphash = (0xaf2138c63055bfd1+ msgs.act_meas._get_hash_recursive(newparents)+ msgs.imu_meas._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if measurment._packed_fingerprint is None:
            measurment._packed_fingerprint = struct.pack(">Q", measurment._get_hash_recursive([]))
        return measurment._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

