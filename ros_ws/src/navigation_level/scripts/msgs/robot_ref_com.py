"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import msgs.servo_check

import msgs.ef_point

import msgs.robot_params

import msgs.body_velocity

class robot_ref_com(object):
    __slots__ = ["start", "mode", "robot_prms", "ref_ef_pt", "body_vel", "srv_check", "cute_action_num"]

    __typenames__ = ["boolean", "int16_t", "msgs.robot_params", "msgs.ef_point", "msgs.body_velocity", "msgs.servo_check", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.start = False
        self.mode = 0
        self.robot_prms = msgs.robot_params()
        self.ref_ef_pt = msgs.ef_point()
        self.body_vel = msgs.body_velocity()
        self.srv_check = msgs.servo_check()
        self.cute_action_num = 0

    def encode(self):
        buf = BytesIO()
        buf.write(robot_ref_com._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bh", self.start, self.mode))
        assert self.robot_prms._get_packed_fingerprint() == msgs.robot_params._get_packed_fingerprint()
        self.robot_prms._encode_one(buf)
        assert self.ref_ef_pt._get_packed_fingerprint() == msgs.ef_point._get_packed_fingerprint()
        self.ref_ef_pt._encode_one(buf)
        assert self.body_vel._get_packed_fingerprint() == msgs.body_velocity._get_packed_fingerprint()
        self.body_vel._encode_one(buf)
        assert self.srv_check._get_packed_fingerprint() == msgs.servo_check._get_packed_fingerprint()
        self.srv_check._encode_one(buf)
        buf.write(struct.pack(">h", self.cute_action_num))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_ref_com._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_ref_com._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_ref_com()
        self.start = bool(struct.unpack('b', buf.read(1))[0])
        self.mode = struct.unpack(">h", buf.read(2))[0]
        self.robot_prms = msgs.robot_params._decode_one(buf)
        self.ref_ef_pt = msgs.ef_point._decode_one(buf)
        self.body_vel = msgs.body_velocity._decode_one(buf)
        self.srv_check = msgs.servo_check._decode_one(buf)
        self.cute_action_num = struct.unpack(">h", buf.read(2))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_ref_com in parents: return 0
        newparents = parents + [robot_ref_com]
        tmphash = (0xd37fc7aa4632c10a+ msgs.robot_params._get_hash_recursive(newparents)+ msgs.ef_point._get_hash_recursive(newparents)+ msgs.body_velocity._get_hash_recursive(newparents)+ msgs.servo_check._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_ref_com._packed_fingerprint is None:
            robot_ref_com._packed_fingerprint = struct.pack(">Q", robot_ref_com._get_hash_recursive([]))
        return robot_ref_com._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

